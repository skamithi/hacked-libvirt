Description: virObjectUnref() libvirtd killed by SIGSEGV
 While memory load is high, libvirtd could be crashed(segfault) if you 
 command something ( destroy, migrate, etc )

Author: Peter Krempa <pkrempa@redhat.com>

Origin: upstream, http://libvirt.org/git/?p=libvirt.git;a=commitdiff;h=ad886fa6c8ebc321a0386a75c187d315111cf1f3
        upstream, http://libvirt.org/git/?p=libvirt.git;a=commitdiff;h=6ca857c7c8a1f7b571132d6c7fff5a06301a5e9a
        upstream, http://libvirt.org/git/?p=libvirt.git;a=commitdiff;h=a98129c0ee52b6a8fdd39988a6d090057f149ae9
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1464175
Last-Update: 2015-07-08
Index: libvirt-1.2.2/daemon/remote.c
===================================================================
--- libvirt-1.2.2.orig/daemon/remote.c
+++ libvirt-1.2.2/daemon/remote.c
@@ -143,6 +143,7 @@ remoteRelayDomainEventCheckACL(virNetSer
     /* For now, we just create a virDomainDef with enough contents to
      * satisfy what viraccessdriverpolkit.c references.  This is a bit
      * fragile, but I don't know of anything better.  */
+    memset(&def, 0, sizeof(def));
     def.name = dom->name;
     memcpy(def.uuid, dom->uuid, VIR_UUID_BUFLEN);
 
Index: libvirt-1.2.2/src/rpc/virnetserverclient.c
===================================================================
--- libvirt-1.2.2.orig/src/rpc/virnetserverclient.c
+++ libvirt-1.2.2/src/rpc/virnetserverclient.c
@@ -910,12 +910,12 @@ void virNetServerClientDispose(void *obj
     PROBE(RPC_SERVER_CLIENT_DISPOSE,
           "client=%p", client);
 
-    virObjectUnref(client->identity);
-
     if (client->privateData &&
         client->privateDataFreeFunc)
         client->privateDataFreeFunc(client->privateData);
 
+    virObjectUnref(client->identity);
+
 #if WITH_SASL
     virObjectUnref(client->sasl);
 #endif
Index: libvirt-1.2.2/src/util/viridentity.c
===================================================================
--- libvirt-1.2.2.orig/src/util/viridentity.c
+++ libvirt-1.2.2/src/util/viridentity.c
@@ -110,14 +110,15 @@ int virIdentitySetCurrent(virIdentityPtr
         return -1;
 
     old = virThreadLocalGet(&virIdentityCurrent);
-    virObjectUnref(old);
 
     if (virThreadLocalSet(&virIdentityCurrent,
                           virObjectRef(ident)) < 0) {
         virReportError(VIR_ERR_INTERNAL_ERROR, "%s",
                        _("Unable to set thread local identity"));
+        virObjectUnref(ident);
         return -1;
     }
+    virObjectUnref(old);
 
     return 0;
 }
